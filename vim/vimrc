" >>> SETUP >>>
"so "$HOME/.vim/config/coc_config.vim"
syntax on
set autoindent
set smartindent
set number
set mouse=a
set showmatch
set smartcase
set autowrite
set wrap
set ttyfast
set laststatus=2
set showmode
set showcmd
set list
"set listchars=tab:>\ ,trail:â€¢,extends:#,nbsp:.
set hlsearch
set incsearch
set rnu
set paste
set ruler
set tabstop=4
set shiftwidth=4
set expandtab
set nocompatible
set encoding=utf-8
set hidden
set nobackup
set nowritebackup
set cmdheight=2
set updatetime=300
set shortmess+=c


" >>> ALACRITTY >>>
set ttymouse=sgr


" >>> COLORSCHEME >>>
colorscheme monokai-bold

" >>> Plugins >>>
call plug#begin('~/.vim/plugged')
" >NERDtree
Plug 'scrooloose/nerdtree'

" >JEDI-vim
Plug 'davidhalter/jedi-vim'

" >SimplyFold
Plug 'tmhedberg/simpylfold'

" >PythonVenv
Plug 'jmcantrell/vim-virtualenv'

" >Vim-Polyglot
Plug 'sheerun/vim-polyglot'

" >YouCompleteMe
" Plug 'valloric/youcompleteme', { 'do': './install.py --clang-completer --system-libclang' }

" >CoC
Plug 'neoclide/coc.nvim'
Plug 'pappasam/coc-jedi', { 'do': 'yarn install --frozen-lockfile && yarn build' }

" >JS Syntax
Plug 'pangloss/vim-javascript'

" >Json
Plug 'elzr/vim-json'

" >Docker
Plug 'ekalinin/dockerfile.vim'

" >Cpp
Plug 'octol/vim-cpp-enhanced-highlight'

" >JSLib
Plug 'othree/javascript-libraries-syntax.vim'

" >Git
Plug 'tpope/vim-fugitive'

" >Markdown
Plug 'plasticboy/vim-markdown'

" >CrystalLinw
"Plug 'rbong/vim-crystalline'

" >Airline
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" >Syntatic
Plug 'vim-syntastic/syntastic'

" >ack
Plug 'mileszs/ack.vim'

" >surround
Plug 'tpope/vim-surround'

" >MultiCusrsor
Plug 'terryma/vim-multiple-cursors'

" >Rainbow Bracker
Plug 'luochen1990/rainbow'

" >Tagbar
Plug 'preservim/tagbar'

" >CSV
Plug 'chrisbra/csv.vim'

" >IndentGuide
"Plug 'nathanaelkane/vim-indent-guides'

" >AutoFormat
Plug 'chiel92/vim-autoformat'

" >AutoPairs
Plug 'jiangmiao/auto-pairs'

call plug#end()

" >>> NerdTree
nmap <F10> :NERDTreeToggle<CR>
let g:NERDTreeGitStatusWithFlags = 1

" >>> YCM
let g:ycm_global_ycm_extra_conf = "$HOME/.vim/plugged/youcompleteme/.ycm_extra_conf.py"

" >>>AirLine
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
let g:airline#extensions#tabline#formatter = 'unique_tail_improved'
let g:airline_theme='luna'

"function! StatusLine(...)
"  return crystalline#mode() . crystalline#right_mode_sep('')
"        \ . ' %f%h%w%m%r ' . crystalline#right_sep('', 'Fill') . '%='
"        \ . crystalline#left_sep('', 'Fill') . ' %{&ft}[%{&fenc!=#""?&fenc:&enc}][%{&ff}] %l/%L %c%V %P '
"endfunction
"set statusline=%!StatusLine()
"let g:crystalline_enable_sep = 'StatusLine'
"let g:crystalline_statusline_fn = 'StatusLine'
"let g:crystalline_theme = 'jellybeans'
set laststatus=2

" >>> Tagbar
nmap <F8> :TagbarToggle<CR>

" >COC
nmap <F2> <Plug>(coc-rename)
inoremap <silent><expr> <TAB>
            \ pumvisible() ? "\<C-n>" :
            \ <SID>check_back_space() ? "\<TAB>" :
            \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
    if (index(['vim','help'], &filetype) >= 0)
        execute 'h '.expand('<cword>')
    elseif (coc#rpc#ready())
        call CocActionAsync('doHover')
    else
        execute '!' . &keywordprg . " " . expand('<cword>')
    endif
endfunction

" Remap <C-f> and <C-b> for scroll float windows/popups.
if has('nvim-0.4.0') || has('patch-8.2.0750')
    nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
    nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
    inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
    inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
    vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
    vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

" add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}


" >IndentGuide
let g:indent_guides_enable_on_vim_startup = 1

" >Autoindent
noremap <F3> :Autoformat<CR>

