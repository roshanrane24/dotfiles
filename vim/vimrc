">>> OPTIONS >>>
set nocompatible
">>> Search
set hlsearch                "Search Highlighting
set incsearch               "Increamental Search
set ignorecase              "Ignore case while searching
set smartcase               "Auto Case sensitive
">>> Indentation
set autoindent              "New lines inherit the indentation of previous lines.
set expandtab               "Convert Tabs into Spaces
set tabstop=4               "Indent using four spaces.
set smarttab                "Insert “tabstop” number of spaces when the “tab” key is pressed.
set shiftwidth=4            "When shifting, indent using four spaces
set shiftround              "When shifting lines, round the indentation to the nearest multiple of “shiftwidth.”
filetype indent on			"Indent based on file
"set smartindent
">>> Performance
"set complete-=1            "Limit the files searched for auto-completes.
"set lazydraw               "Don’t update screen during macro and script execution.
">>> Text Rendering
set encoding=utf-8          "Use an encoding that supports unicode.
set linebreak               "Avoid wrapping a line in the middle of a word.
syntax enable               "Syantax Highlighting
set wrap                    "Enable line wrapping.
set display+=lastline       "Always try to show a paragraph’s last line.
set scrolloff=1             "The number of screen lines to keep above and below the cursor
set sidescrolloff=5         "The number of screen columns to keep to the left and right of the cursor.
"set spell                  "spell Check
">>> UI
set laststatus=2            "Alway show statusbar
set ruler                   "Line No. & Column No.(Cursor Position)
set wildmenu                "Display command line’s tab complete options as a menu.
set relativenumber          "Show line number on the current line and relative numbers on all other lines
set number          "Show line number on the current line
set mouse=a                 "Enable mouse for scrolling and resizing
set cursorline              "Highlight the line currently under cursor
set tabpagemax=50           "Maximum number of tab pages that can be opened from the command line.
set background=dark         "Use colors that suit a dark background
set showmode                "Show mode on statusbar
">>> Code Folding
set foldmethod=indent       "Fold based on indention levels.
set foldnestmax=3           "Only fold up to three nested levels.
"set nofoldenable            "Disable folding by default.
">>> Misc
set nobackup                "Disable Backup Files
set nowritebackup           "Disable Backup
set noswapfile              "Diasble Swap Files
set cmdheight=1             "Commad Line height
set autoread                "Automatically re-read files if unmodified inside Vim
set backspace=indent,eol,start "Allow backspacing over indention, line breaks and insertion start.
set backupdir=~/.cache/vim: "Directory to store backup files
set dir=~/.cache/vim        "Directory to store swap files.
set formatoptions+=j        "Delete comment characters when joining lines.
set history=1000            "Increase the undo limit
set shell=/bin/sh           "Shell to execute commad
set hidden                  "Hide files in the background instead of closing them.
set showmatch               "Use % to jump between matching brackets
set autowrite               "Save when switching between 
set ttyfast                 "More Chars to screen for redrawing
set showcmd
set list                    "show hidden characters
set listchars=tab:,trail:,extends:>,nbsp:#,precedes:<
set paste                   "Paste from clipboard
set updatetime=300
set splitbelow
set splitright
"set shortmess+=c
">>> ALACRITTY
set ttymouse=sgr            "Termianl Mouse Supoort
">>> COLORSCHEME
colorscheme monokai
"<<< OPTIONS <<<

">>> PLUGINS >>>
" >>> NerdTree
let g:NERDTreeGitStatusWithFlags = 1
">>> SimplyFold
let g:SimpylFold_docstring_preview=1
let g:SimpylFold_fold_docstring=1
let b:SimpylFold_fold_docstring=1
let g:SimpylFold_fold_import=1
let b:SimpylFold_fold_import=1
let g:SimpylFold_fold_blank=0
let b:SimpylFold_fold_blank=0
">>> ALE
let g:ale_linter={
	\ 'python': ['pylint', 'flake8']}
let g:ale_fixers={
	\ 'python': ['nayvy#ale_fixer', 'autopep8', 'isort']}
let g:ale_disable_lsp = 1
">>> FZF
let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-h': 'split',
  \ 'ctrl-v': 'vsplit' }

let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

" See `man fzf-tmux` for available options
if exists('$TMUX')
  let g:fzf_layout = { 'tmux': '-p90%,60%' }
else
  let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.6 } }
endif
">>> Rainbow
let g:rainbow_active = 1
">>> Polyglot
let g:polyglot_disabled = ['sensible']
">>> AirLine
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#formatter = 'unique_tail_improved'
let g:airline_powerline_fonts = 1
"let g:airline_statusline_ontop = 1
let g:airline#extensions#whitespace#enabled = 0
let g:airline_theme='badwolf'
">>> CoC
let g:coc_global_extensions = ['coc-json', 'coc-jedi']
">>> Vim-Plug
call plug#begin('~/.vim/plugged')

Plug 'scrooloose/nerdtree'                          "NERDtree
Plug 'tmhedberg/SimpylFold'							"Code Follding
Plug 'dense-analysis/ale'							"SyantaxChecking
Plug 'nvie/vim-flake8'								"PEP-8 Python Syntax
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }	"Fuzzy Finder
Plug 'tpope/vim-fugitive'							"Git
Plug 'luochen1990/rainbow'						    "Rainbow Brackets
Plug 'tpope/vim-surround'							"Surround
Plug 'relastle/vim-nayvy'							"Python Fixer
Plug 'preservim/tagbar'								"Tagbar
Plug 'jiangmiao/auto-pairs'							"AutoComplete Brackets&Quotes
Plug 'sheerun/vim-polyglot'							"Language Pack
Plug 'jeetsukumaran/vim-buffergator'				"Buffer Window
Plug 'vim-airline/vim-airline'                      "Airline Status
Plug 'vim-airline/vim-airline-themes'               "Airline Status Themes
Plug 'neoclide/coc.nvim', {'branch': 'release'}     "Completion

call plug#end()
"<<< PLUGINS <<<

">>> KEYBINDS >>>
">>> NERDtree
nmap <F10> :NERDTreeToggle<CR>
">>> FZF
nnoremap <silent> <Leader>p :FZF<CR>
">>> Buffers
nnoremap <C-b>c :BufCurOnly<CR>
nnoremap <C-b>k :bd<CR>
">>> Git Fugitive
nnoremap <C-g>b :call <SID>ToggleBlame()<CR>
nnoremap <C-g>a :Git add<CR>
nnoremap <C-g>c :Git commit<CR>
nnoremap <C-g>s :Gstatus<CR>
nnoremap <C-g>d :Gvdiff<CR>
nnoremap <C-g>i :Gedit :0<CR>
">>> ALE
nnoremap <leader><F5> :ALEFix<CR>
nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)
nnoremap <leader><F6> :ALEGoToDefinition<CR>
nnoremap <leader><F7> :ALEHover<CR>
">>> NayVy
nnoremap <leader><F8> :NayvyImportFZF<CR>
nnoremap <leader><F9> :NayvyTestGenerateFZF<CR>
">>> Tagbar
nmap <F8> :TagbarToggle<CR>
">>> CoC
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

" Symbol renaming.
nmap <F2> <Plug>(coc-rename)

" Remap <C-f> and <C-b> for scroll float windows/popups.
if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <Silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif
">>> Ex
nnoremap <silent> <esc> :noh<cr><esc>
"<<< KEYBINDS <<<

">>> EX >>>
au BufNewFile,BufRead *.py
    \ set tabstop=4
    \ set softtabstop=4
    \ set shiftwidth=4
    \ set textwidth=79
    \ set expandtab
    \ set autoindent
    \ set fileformat=unix

au BufNewFile,BufRead *.js, *.html, *.css
    \ set tabstop=2
    \ set softtabstop=2
    \ set shiftwidth=2
"<<< EX <<<
">>> Dark Backgropund on GUI
if has('gui_running')
  set background=dark
endif
">>> Buffers
command! BufCurOnly execute '%bdelete|edit#|bdelete#'
">>> Git
function! s:ToggleBlame()
    if &l:filetype ==# 'fugitiveblame'
        close
    else
        Gblame
    endif
endfunction
">>> CoC
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')


"<<< Ex <<<
